/* Generated by Cython 0.29.36 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/paretoarchive/paretoarchive.h"
        ],
        "extra_compile_args": [
            "-std=c++11",
            "-Wno-sign-compare"
        ],
        "include_dirs": [
            "src/paretoarchive",
            "./include"
        ],
        "language": "c++",
        "name": "paretoarchive.core",
        "sources": [
            "src/paretoarchive/core.pyx"
        ]
    },
    "module_name": "paretoarchive.core"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_36"
#define CYTHON_HEX_VERSION 0x001D24F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__paretoarchive__core
#define __PYX_HAVE_API__paretoarchive__core
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "paretoarchive.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/paretoarchive/core.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14;
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15;

/* "paretoarchive/core.pyx":48
 *     ctypedef int myInt15 "15"    # a fake type
 * 
 * ctypedef BspTreeArchive[myInt1] BspTreeArchive1             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive1:
 */
typedef BspTreeArchive<1>  __pyx_t_13paretoarchive_4core_BspTreeArchive1;

/* "paretoarchive/core.pyx":109
 * 
 * 
 * ctypedef BspTreeArchive[myInt2] BspTreeArchive2             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive2:
 */
typedef BspTreeArchive<2>  __pyx_t_13paretoarchive_4core_BspTreeArchive2;

/* "paretoarchive/core.pyx":173
 * 
 * 
 * ctypedef BspTreeArchive[myInt3] BspTreeArchive3             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive3:
 */
typedef BspTreeArchive<3>  __pyx_t_13paretoarchive_4core_BspTreeArchive3;

/* "paretoarchive/core.pyx":240
 * 
 * 
 * ctypedef BspTreeArchive[myInt4] BspTreeArchive4             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive4:
 */
typedef BspTreeArchive<4>  __pyx_t_13paretoarchive_4core_BspTreeArchive4;

/* "paretoarchive/core.pyx":310
 * 
 * 
 * ctypedef BspTreeArchive[myInt5] BspTreeArchive5             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive5:
 */
typedef BspTreeArchive<5>  __pyx_t_13paretoarchive_4core_BspTreeArchive5;

/* "paretoarchive/core.pyx":383
 * 
 * 
 * ctypedef BspTreeArchive[myInt6] BspTreeArchive6             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive6:
 */
typedef BspTreeArchive<6>  __pyx_t_13paretoarchive_4core_BspTreeArchive6;

/* "paretoarchive/core.pyx":459
 * 
 * 
 * ctypedef BspTreeArchive[myInt7] BspTreeArchive7             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive7:
 */
typedef BspTreeArchive<7>  __pyx_t_13paretoarchive_4core_BspTreeArchive7;

/* "paretoarchive/core.pyx":538
 * 
 * 
 * ctypedef BspTreeArchive[myInt8] BspTreeArchive8             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive8:
 */
typedef BspTreeArchive<8>  __pyx_t_13paretoarchive_4core_BspTreeArchive8;

/* "paretoarchive/core.pyx":620
 * 
 * 
 * ctypedef BspTreeArchive[myInt9] BspTreeArchive9             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive9:
 */
typedef BspTreeArchive<9>  __pyx_t_13paretoarchive_4core_BspTreeArchive9;

/* "paretoarchive/core.pyx":705
 * 
 * 
 * ctypedef BspTreeArchive[myInt10] BspTreeArchive10             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive10:
 */
typedef BspTreeArchive<10>  __pyx_t_13paretoarchive_4core_BspTreeArchive10;

/* "paretoarchive/core.pyx":793
 * 
 * 
 * ctypedef BspTreeArchive[myInt11] BspTreeArchive11             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive11:
 */
typedef BspTreeArchive<11>  __pyx_t_13paretoarchive_4core_BspTreeArchive11;

/* "paretoarchive/core.pyx":884
 * 
 * 
 * ctypedef BspTreeArchive[myInt12] BspTreeArchive12             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive12:
 */
typedef BspTreeArchive<12>  __pyx_t_13paretoarchive_4core_BspTreeArchive12;

/* "paretoarchive/core.pyx":978
 * 
 * 
 * ctypedef BspTreeArchive[myInt13] BspTreeArchive13             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive13:
 */
typedef BspTreeArchive<13>  __pyx_t_13paretoarchive_4core_BspTreeArchive13;

/* "paretoarchive/core.pyx":1075
 * 
 * 
 * ctypedef BspTreeArchive[myInt14] BspTreeArchive14             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive14:
 */
typedef BspTreeArchive<14>  __pyx_t_13paretoarchive_4core_BspTreeArchive14;

/* "paretoarchive/core.pyx":1175
 * 
 * 
 * ctypedef BspTreeArchive[myInt15] BspTreeArchive15             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBspTreeArchive15:
 */
typedef BspTreeArchive<15>  __pyx_t_13paretoarchive_4core_BspTreeArchive15;

/* "paretoarchive/core.pyx":50
 * ctypedef BspTreeArchive[myInt1] BspTreeArchive1
 * 
 * cdef class PyBspTreeArchive1:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive1 *_front
 *   cdef int _sign[1]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive1 *_front;
  int _sign[1];
  int _id;
};


/* "paretoarchive/core.pyx":111
 * ctypedef BspTreeArchive[myInt2] BspTreeArchive2
 * 
 * cdef class PyBspTreeArchive2:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive2 *_front
 *   cdef int _sign[2]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive2 *_front;
  int _sign[2];
  int _id;
};


/* "paretoarchive/core.pyx":175
 * ctypedef BspTreeArchive[myInt3] BspTreeArchive3
 * 
 * cdef class PyBspTreeArchive3:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive3 *_front
 *   cdef int _sign[3]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive3 *_front;
  int _sign[3];
  int _id;
};


/* "paretoarchive/core.pyx":242
 * ctypedef BspTreeArchive[myInt4] BspTreeArchive4
 * 
 * cdef class PyBspTreeArchive4:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive4 *_front
 *   cdef int _sign[4]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive4 *_front;
  int _sign[4];
  int _id;
};


/* "paretoarchive/core.pyx":312
 * ctypedef BspTreeArchive[myInt5] BspTreeArchive5
 * 
 * cdef class PyBspTreeArchive5:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive5 *_front
 *   cdef int _sign[5]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive5 *_front;
  int _sign[5];
  int _id;
};


/* "paretoarchive/core.pyx":385
 * ctypedef BspTreeArchive[myInt6] BspTreeArchive6
 * 
 * cdef class PyBspTreeArchive6:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive6 *_front
 *   cdef int _sign[6]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive6 *_front;
  int _sign[6];
  int _id;
};


/* "paretoarchive/core.pyx":461
 * ctypedef BspTreeArchive[myInt7] BspTreeArchive7
 * 
 * cdef class PyBspTreeArchive7:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive7 *_front
 *   cdef int _sign[7]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive7 *_front;
  int _sign[7];
  int _id;
};


/* "paretoarchive/core.pyx":540
 * ctypedef BspTreeArchive[myInt8] BspTreeArchive8
 * 
 * cdef class PyBspTreeArchive8:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive8 *_front
 *   cdef int _sign[8]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive8 *_front;
  int _sign[8];
  int _id;
};


/* "paretoarchive/core.pyx":622
 * ctypedef BspTreeArchive[myInt9] BspTreeArchive9
 * 
 * cdef class PyBspTreeArchive9:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive9 *_front
 *   cdef int _sign[9]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive9 *_front;
  int _sign[9];
  int _id;
};


/* "paretoarchive/core.pyx":707
 * ctypedef BspTreeArchive[myInt10] BspTreeArchive10
 * 
 * cdef class PyBspTreeArchive10:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive10 *_front
 *   cdef int _sign[10]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive10 *_front;
  int _sign[10];
  int _id;
};


/* "paretoarchive/core.pyx":795
 * ctypedef BspTreeArchive[myInt11] BspTreeArchive11
 * 
 * cdef class PyBspTreeArchive11:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive11 *_front
 *   cdef int _sign[11]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive11 *_front;
  int _sign[11];
  int _id;
};


/* "paretoarchive/core.pyx":886
 * ctypedef BspTreeArchive[myInt12] BspTreeArchive12
 * 
 * cdef class PyBspTreeArchive12:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive12 *_front
 *   cdef int _sign[12]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive12 *_front;
  int _sign[12];
  int _id;
};


/* "paretoarchive/core.pyx":980
 * ctypedef BspTreeArchive[myInt13] BspTreeArchive13
 * 
 * cdef class PyBspTreeArchive13:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive13 *_front
 *   cdef int _sign[13]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive13 *_front;
  int _sign[13];
  int _id;
};


/* "paretoarchive/core.pyx":1077
 * ctypedef BspTreeArchive[myInt14] BspTreeArchive14
 * 
 * cdef class PyBspTreeArchive14:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive14 *_front
 *   cdef int _sign[14]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive14 *_front;
  int _sign[14];
  int _id;
};


/* "paretoarchive/core.pyx":1177
 * ctypedef BspTreeArchive[myInt15] BspTreeArchive15
 * 
 * cdef class PyBspTreeArchive15:             # <<<<<<<<<<<<<<
 *   cdef BspTreeArchive15 *_front
 *   cdef int _sign[15]
 */
struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 {
  PyObject_HEAD
  __pyx_t_13paretoarchive_4core_BspTreeArchive15 *_front;
  int _sign[15];
  int _id;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* AssertionsEnabled.proto */
#define __Pyx_init_assertions_enabled()
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __pyx_assertions_enabled() (1)
#elif PY_VERSION_HEX < 0x03080000  ||  CYTHON_COMPILING_IN_PYPY  ||  defined(Py_LIMITED_API)
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030900A6
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  #undef __Pyx_init_assertions_enabled
  static void __Pyx_init_assertions_enabled(void) {
    __pyx_assertions_enabled_flag = ! _PyInterpreterState_GetConfig(__Pyx_PyThreadState_Current->interp)->optimization_level;
  }
#else
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'paretoarchive.core' */
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive1 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive2 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive3 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive4 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive5 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive6 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive7 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive8 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive9 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive10 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive11 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive12 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive13 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive14 = 0;
static PyTypeObject *__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive15 = 0;
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_int(int *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_int(int *, Py_ssize_t); /*proto*/
#define __Pyx_MODULE_NAME "paretoarchive.core"
extern int __pyx_module_is_main_paretoarchive__core;
int __pyx_module_is_main_paretoarchive__core = 0;

/* Implementation of 'paretoarchive.core' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_sorted;
static const char __pyx_k_[] = ",";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_pts[] = "pts";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_MAXOBJ[] = "MAXOBJ";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_archive[] = "_archive";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_process[] = "process";
static const char __pyx_k_sortKey[] = "sortKey";
static const char __pyx_k_customId[] = "customId";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_returnId[] = "returnId";
static const char __pyx_k_OBJ2CLASS[] = "OBJ2CLASS";
static const char __pyx_k_configure[] = "configure";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_returnIds[] = "returnIds";
static const char __pyx_k_objectives[] = "objectives";
static const char __pyx_k_is_supported[] = " is supported";
static const char __pyx_k_PyBspTreeArchive[] = "PyBspTreeArchive";
static const char __pyx_k_PyBspTreeArchive1[] = "PyBspTreeArchive1";
static const char __pyx_k_PyBspTreeArchive2[] = "PyBspTreeArchive2";
static const char __pyx_k_PyBspTreeArchive3[] = "PyBspTreeArchive3";
static const char __pyx_k_PyBspTreeArchive4[] = "PyBspTreeArchive4";
static const char __pyx_k_PyBspTreeArchive5[] = "PyBspTreeArchive5";
static const char __pyx_k_PyBspTreeArchive6[] = "PyBspTreeArchive6";
static const char __pyx_k_PyBspTreeArchive7[] = "PyBspTreeArchive7";
static const char __pyx_k_PyBspTreeArchive8[] = "PyBspTreeArchive8";
static const char __pyx_k_PyBspTreeArchive9[] = "PyBspTreeArchive9";
static const char __pyx_k_PyBspTreeArchive10[] = "PyBspTreeArchive10";
static const char __pyx_k_PyBspTreeArchive11[] = "PyBspTreeArchive11";
static const char __pyx_k_PyBspTreeArchive12[] = "PyBspTreeArchive12";
static const char __pyx_k_PyBspTreeArchive13[] = "PyBspTreeArchive13";
static const char __pyx_k_PyBspTreeArchive14[] = "PyBspTreeArchive14";
static const char __pyx_k_PyBspTreeArchive15[] = "PyBspTreeArchive15";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_minimizeObjective1[] = "minimizeObjective1";
static const char __pyx_k_minimizeObjective2[] = "minimizeObjective2";
static const char __pyx_k_minimizeObjective3[] = "minimizeObjective3";
static const char __pyx_k_minimizeObjective4[] = "minimizeObjective4";
static const char __pyx_k_minimizeObjective5[] = "minimizeObjective5";
static const char __pyx_k_minimizeObjective6[] = "minimizeObjective6";
static const char __pyx_k_paretoarchive_core[] = "paretoarchive.core";
static const char __pyx_k_PyBspTreeArchive___init[] = "PyBspTreeArchive.__init__";
static const char __pyx_k_PyBspTreeArchive_filter[] = "PyBspTreeArchive.filter";
static const char __pyx_k_src_paretoarchive_core_pyx[] = "src/paretoarchive/core.pyx";
static const char __pyx_k_Invalid_number_of_objectives_Onl[] = "Invalid number of objectives. Only ";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_Invalid_number_of_objectives_Onl;
static PyObject *__pyx_n_s_MAXOBJ;
static PyObject *__pyx_n_s_OBJ2CLASS;
static PyObject *__pyx_n_s_PyBspTreeArchive;
static PyObject *__pyx_n_s_PyBspTreeArchive1;
static PyObject *__pyx_n_s_PyBspTreeArchive10;
static PyObject *__pyx_n_s_PyBspTreeArchive11;
static PyObject *__pyx_n_s_PyBspTreeArchive12;
static PyObject *__pyx_n_s_PyBspTreeArchive13;
static PyObject *__pyx_n_s_PyBspTreeArchive14;
static PyObject *__pyx_n_s_PyBspTreeArchive15;
static PyObject *__pyx_n_s_PyBspTreeArchive2;
static PyObject *__pyx_n_s_PyBspTreeArchive3;
static PyObject *__pyx_n_s_PyBspTreeArchive4;
static PyObject *__pyx_n_s_PyBspTreeArchive5;
static PyObject *__pyx_n_s_PyBspTreeArchive6;
static PyObject *__pyx_n_s_PyBspTreeArchive7;
static PyObject *__pyx_n_s_PyBspTreeArchive8;
static PyObject *__pyx_n_s_PyBspTreeArchive9;
static PyObject *__pyx_n_s_PyBspTreeArchive___init;
static PyObject *__pyx_n_s_PyBspTreeArchive_filter;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_kp_u_and;
static PyObject *__pyx_n_s_archive;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_configure;
static PyObject *__pyx_n_s_customId;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_u_is_supported;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_minimizeObjective1;
static PyObject *__pyx_n_s_minimizeObjective2;
static PyObject *__pyx_n_s_minimizeObjective3;
static PyObject *__pyx_n_s_minimizeObjective4;
static PyObject *__pyx_n_s_minimizeObjective5;
static PyObject *__pyx_n_s_minimizeObjective6;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_objectives;
static PyObject *__pyx_n_s_paretoarchive_core;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_process;
static PyObject *__pyx_n_s_pts;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_returnId;
static PyObject *__pyx_n_s_returnIds;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sortKey;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_kp_s_src_paretoarchive_core_pyx;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self); /* proto */
static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self, PyObject *__pyx_v_config); /* proto */
static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self, bool __pyx_v_returnIds); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_16PyBspTreeArchive___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_objectives, PyObject *__pyx_v_minimizeObjective1, PyObject *__pyx_v_minimizeObjective2, PyObject *__pyx_v_minimizeObjective3, PyObject *__pyx_v_minimizeObjective4, PyObject *__pyx_v_minimizeObjective5, PyObject *__pyx_v_minimizeObjective6); /* proto */
static PyObject *__pyx_pf_13paretoarchive_4core_16PyBspTreeArchive_2filter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_returnIds, PyObject *__pyx_v_sortKey); /* proto */
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive5(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive6(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive7(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive8(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive9(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive10(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive11(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive12(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive13(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive14(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive15(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__6;
/* Late includes */

/* "paretoarchive/core.pyx":55
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive1, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1___reduce__[] = "PyBspTreeArchive1.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":56
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive1, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive1));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive1));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive1));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":55
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive1, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":58
 *     return (PyBspTreeArchive1, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive1()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":59
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive1()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive1();

  /* "paretoarchive/core.pyx":60
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive1()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":61
 *     self._front = new BspTreeArchive1()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":58
 *     return (PyBspTreeArchive1, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive1()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":63
 *     self._sign[0] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_4configure[] = "PyBspTreeArchive1.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":64
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":63
 *     self._sign[0] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":66
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":67
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":68
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":66
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":70
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 1
 *     cdef ObjVec[myInt1] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_8process[] = "PyBspTreeArchive1.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 70, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 70, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<1>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":71
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 1             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt1] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 71, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 71, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":74
 *     cdef ObjVec[myInt1] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":75
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":76
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":74
 *     cdef ObjVec[myInt1] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":77
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     if not returnId:
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":78
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":79
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":80
 *     data[0] = self._sign[0]*item[0]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":79
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":81
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":70
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 1
 *     cdef ObjVec[myInt1] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":83
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_10clear[] = "PyBspTreeArchive1.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":84
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":85
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":83
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":87
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_12empty[] = "PyBspTreeArchive1.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":88
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":87
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":90
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_14size[] = "PyBspTreeArchive1.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":91
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":90
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":93
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt1]*] vec
 *     cdef ObjVec[myInt1] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_16points[] = "PyBspTreeArchive1.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 93, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive1_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<1>  const *>  __pyx_v_vec;
  ObjVec<1>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<1>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<1>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<1>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":97
 *     cdef ObjVec[myInt1] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":98
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":99
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":100
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":101
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":102
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":103
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":102
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":105
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_7); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":106
 *         else:
 *             res.append([self._sign[0]*veci[0]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":93
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt1]*] vec
 *     cdef ObjVec[myInt1] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive1.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":116
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive2, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2___reduce__[] = "PyBspTreeArchive2.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":117
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive2, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive2));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive2));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":116
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive2, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":119
 *     return (PyBspTreeArchive2, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive2()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":120
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive2()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive2();

  /* "paretoarchive/core.pyx":121
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive2()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":122
 *     self._front = new BspTreeArchive2()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 * 
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":123
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":119
 *     return (PyBspTreeArchive2, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive2()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":125
 *     self._sign[1] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_4configure[] = "PyBspTreeArchive2.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":126
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":127
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":125
 *     self._sign[1] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":129
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":130
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":131
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":129
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":133
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 2
 *     cdef ObjVec[myInt2] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_8process[] = "PyBspTreeArchive2.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 133, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 133, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<2>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":134
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 2             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt2] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 134, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 2) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 134, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":137
 *     cdef ObjVec[myInt2] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":138
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":139
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":137
 *     cdef ObjVec[myInt2] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":140
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":141
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":142
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":143
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 143, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":144
 *     data[1] = self._sign[1]*item[1]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":143
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":145
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":133
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 2
 *     cdef ObjVec[myInt2] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":147
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_10clear[] = "PyBspTreeArchive2.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":148
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":149
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":147
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":151
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_12empty[] = "PyBspTreeArchive2.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":152
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":151
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":154
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_14size[] = "PyBspTreeArchive2.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":155
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":154
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":157
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt2]*] vec
 *     cdef ObjVec[myInt2] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_16points[] = "PyBspTreeArchive2.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 157, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive2_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<2>  const *>  __pyx_v_vec;
  ObjVec<2>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<2>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<2>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<2>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":161
 *     cdef ObjVec[myInt2] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":162
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":163
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":164
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":165
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":166
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":167
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":166
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":169
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_8); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":170
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":157
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt2]*] vec
 *     cdef ObjVec[myInt2] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive2.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":180
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive3, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3___reduce__[] = "PyBspTreeArchive3.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":181
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive3, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive3));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive3));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive3));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":180
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive3, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":183
 *     return (PyBspTreeArchive3, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive3()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":184
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive3()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive3();

  /* "paretoarchive/core.pyx":185
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive3()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":186
 *     self._front = new BspTreeArchive3()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":187
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 * 
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":188
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":183
 *     return (PyBspTreeArchive3, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive3()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":190
 *     self._sign[2] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_4configure[] = "PyBspTreeArchive3.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":191
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":192
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":193
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":190
 *     self._sign[2] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":195
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":196
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":197
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":195
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":199
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 3
 *     cdef ObjVec[myInt3] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_8process[] = "PyBspTreeArchive3.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 199, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<3>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":200
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 3             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt3] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 200, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 200, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":203
 *     cdef ObjVec[myInt3] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":204
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":205
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":203
 *     cdef ObjVec[myInt3] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":206
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":207
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":208
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":209
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":210
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":211
 *     data[2] = self._sign[2]*item[2]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":210
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":212
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":199
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 3
 *     cdef ObjVec[myInt3] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":214
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_10clear[] = "PyBspTreeArchive3.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":215
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":216
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":214
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":218
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_12empty[] = "PyBspTreeArchive3.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":219
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":218
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":221
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_14size[] = "PyBspTreeArchive3.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":222
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":221
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":224
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt3]*] vec
 *     cdef ObjVec[myInt3] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_16points[] = "PyBspTreeArchive3.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 224, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive3_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<3>  const *>  __pyx_v_vec;
  ObjVec<3>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<3>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<3>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<3>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":228
 *     cdef ObjVec[myInt3] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":229
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":230
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":231
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":232
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":233
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":234
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":233
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":236
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyList_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_9); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":237
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":224
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt3]*] vec
 *     cdef ObjVec[myInt3] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive3.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":247
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive4, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4___reduce__[] = "PyBspTreeArchive4.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":248
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive4, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive4));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive4));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive4));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":247
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive4, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":250
 *     return (PyBspTreeArchive4, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive4()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":251
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive4()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive4();

  /* "paretoarchive/core.pyx":252
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive4()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":253
 *     self._front = new BspTreeArchive4()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":254
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":255
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 * 
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":256
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":250
 *     return (PyBspTreeArchive4, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive4()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":258
 *     self._sign[3] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_4configure[] = "PyBspTreeArchive4.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":259
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":260
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":261
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":262
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":258
 *     self._sign[3] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":264
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":265
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":266
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":264
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":268
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 4
 *     cdef ObjVec[myInt4] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_8process[] = "PyBspTreeArchive4.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 268, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<4>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":269
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 4             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt4] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 269, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 4) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 269, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":272
 *     cdef ObjVec[myInt4] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":273
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":274
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":272
 *     cdef ObjVec[myInt4] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":275
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":276
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":277
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":278
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":279
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":280
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":281
 *     data[3] = self._sign[3]*item[3]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":280
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":282
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":268
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 4
 *     cdef ObjVec[myInt4] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":284
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_10clear[] = "PyBspTreeArchive4.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":285
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":286
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":284
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":288
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_12empty[] = "PyBspTreeArchive4.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":289
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":288
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":291
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_14size[] = "PyBspTreeArchive4.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":292
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":291
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":294
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt4]*] vec
 *     cdef ObjVec[myInt4] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_16points[] = "PyBspTreeArchive4.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 294, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive4_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<4>  const *>  __pyx_v_vec;
  ObjVec<4>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<4>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<4>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<4>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":298
 *     cdef ObjVec[myInt4] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":299
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":300
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":301
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":302
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":303
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":304
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":303
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":306
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyList_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_10); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":307
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":294
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt4]*] vec
 *     cdef ObjVec[myInt4] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive4.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":317
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive5, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5___reduce__[] = "PyBspTreeArchive5.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":318
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive5, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive5));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive5));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive5));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":317
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive5, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":320
 *     return (PyBspTreeArchive5, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive5()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":321
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive5()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive5();

  /* "paretoarchive/core.pyx":322
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive5()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":323
 *     self._front = new BspTreeArchive5()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":324
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":325
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":326
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 * 
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":327
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":320
 *     return (PyBspTreeArchive5, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive5()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":329
 *     self._sign[4] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_4configure[] = "PyBspTreeArchive5.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":330
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":331
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":332
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":333
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":334
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":329
 *     self._sign[4] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":336
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":337
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":338
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":336
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":340
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 5
 *     cdef ObjVec[myInt5] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_8process[] = "PyBspTreeArchive5.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 340, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 340, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<5>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":341
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 5             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt5] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 341, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 5) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 341, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":344
 *     cdef ObjVec[myInt5] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":345
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":346
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":344
 *     cdef ObjVec[myInt5] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":347
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":348
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":349
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":350
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":351
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":352
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":353
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":354
 *     data[4] = self._sign[4]*item[4]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":353
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":355
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":340
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 5
 *     cdef ObjVec[myInt5] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":357
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_10clear[] = "PyBspTreeArchive5.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":358
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":359
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":357
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":361
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_12empty[] = "PyBspTreeArchive5.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":362
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":361
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":364
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_14size[] = "PyBspTreeArchive5.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":365
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":364
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":367
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt5]*] vec
 *     cdef ObjVec[myInt5] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_16points[] = "PyBspTreeArchive5.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 367, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 367, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive5_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<5>  const *>  __pyx_v_vec;
  ObjVec<5>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<5>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<5>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<5>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":371
 *     cdef ObjVec[myInt5] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":372
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":373
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":374
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":375
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":376
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":377
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":376
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":379
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyList_New(5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_11, 4, __pyx_t_10);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_11); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":380
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":367
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt5]*] vec
 *     cdef ObjVec[myInt5] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive5.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":390
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive6, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6___reduce__[] = "PyBspTreeArchive6.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":391
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive6, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive6));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive6));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive6));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":390
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive6, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":393
 *     return (PyBspTreeArchive6, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive6()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":394
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive6()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive6();

  /* "paretoarchive/core.pyx":395
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive6()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":396
 *     self._front = new BspTreeArchive6()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":397
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":398
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":399
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":400
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 * 
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":401
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":393
 *     return (PyBspTreeArchive6, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive6()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":403
 *     self._sign[5] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_4configure[] = "PyBspTreeArchive6.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":404
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":405
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":406
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":407
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":408
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":409
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":403
 *     self._sign[5] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":411
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":412
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":413
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":411
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":415
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 6
 *     cdef ObjVec[myInt6] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_8process[] = "PyBspTreeArchive6.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 415, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 415, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<6>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":416
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 6             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt6] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 416, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 6) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 416, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":419
 *     cdef ObjVec[myInt6] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":420
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":421
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":419
 *     cdef ObjVec[myInt6] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":422
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":423
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":424
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":425
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":426
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":427
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":428
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":429
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":430
 *     data[5] = self._sign[5]*item[5]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":429
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":431
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":415
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 6
 *     cdef ObjVec[myInt6] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":433
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_10clear[] = "PyBspTreeArchive6.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":434
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":435
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":433
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":437
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_12empty[] = "PyBspTreeArchive6.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":438
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":437
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":440
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_14size[] = "PyBspTreeArchive6.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":441
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":440
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":443
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt6]*] vec
 *     cdef ObjVec[myInt6] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_16points[] = "PyBspTreeArchive6.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 443, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 443, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive6_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<6>  const *>  __pyx_v_vec;
  ObjVec<6>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<6>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<6>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<6>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":447
 *     cdef ObjVec[myInt6] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":448
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":449
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":450
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":451
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":452
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":453
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":452
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":455
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyList_New(6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_12, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_12, 5, __pyx_t_11);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_12); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":456
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":443
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt6]*] vec
 *     cdef ObjVec[myInt6] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive6.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":466
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive7, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7___reduce__[] = "PyBspTreeArchive7.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":467
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive7, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive7));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive7));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive7));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":466
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive7, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":469
 *     return (PyBspTreeArchive7, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive7()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":470
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive7()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive7();

  /* "paretoarchive/core.pyx":471
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive7()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":472
 *     self._front = new BspTreeArchive7()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":473
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":474
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":475
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":476
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":477
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 * 
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":478
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":469
 *     return (PyBspTreeArchive7, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive7()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":480
 *     self._sign[6] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_4configure[] = "PyBspTreeArchive7.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":481
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":482
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":483
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":484
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":485
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":486
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":487
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":480
 *     self._sign[6] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":489
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":490
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":491
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":489
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":493
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 7
 *     cdef ObjVec[myInt7] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_8process[] = "PyBspTreeArchive7.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 493, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 493, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<7>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":494
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 7             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt7] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 494, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 7) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 494, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":497
 *     cdef ObjVec[myInt7] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":498
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":499
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":497
 *     cdef ObjVec[myInt7] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":500
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":501
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":502
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":503
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":504
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":505
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":506
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":507
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":508
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 508, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":509
 *     data[6] = self._sign[6]*item[6]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":508
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":510
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":493
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 7
 *     cdef ObjVec[myInt7] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":512
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_10clear[] = "PyBspTreeArchive7.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":513
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":514
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":512
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":516
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_12empty[] = "PyBspTreeArchive7.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":517
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":516
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":519
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_14size[] = "PyBspTreeArchive7.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":520
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":519
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":522
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt7]*] vec
 *     cdef ObjVec[myInt7] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_16points[] = "PyBspTreeArchive7.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 522, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive7_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<7>  const *>  __pyx_v_vec;
  ObjVec<7>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<7>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<7>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<7>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":526
 *     cdef ObjVec[myInt7] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":527
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":528
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":529
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":530
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":531
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":532
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":531
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":534
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyList_New(7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_13, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_13, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_13, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_13, 6, __pyx_t_12);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_13); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":535
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":522
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt7]*] vec
 *     cdef ObjVec[myInt7] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive7.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":545
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive8, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8___reduce__[] = "PyBspTreeArchive8.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":546
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive8, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive8));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive8));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive8));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":545
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive8, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":548
 *     return (PyBspTreeArchive8, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive8()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":549
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive8()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive8();

  /* "paretoarchive/core.pyx":550
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive8()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":551
 *     self._front = new BspTreeArchive8()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":552
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":553
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":554
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":555
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":556
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":557
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 * 
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":558
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":548
 *     return (PyBspTreeArchive8, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive8()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":560
 *     self._sign[7] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_4configure[] = "PyBspTreeArchive8.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":561
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":562
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":563
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":564
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":565
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":566
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":567
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":568
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":560
 *     self._sign[7] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":570
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":571
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":572
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":570
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":574
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 8
 *     cdef ObjVec[myInt8] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_8process[] = "PyBspTreeArchive8.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<8>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":575
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 8             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt8] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 575, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 8) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 575, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":578
 *     cdef ObjVec[myInt8] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":579
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":580
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":578
 *     cdef ObjVec[myInt8] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":581
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":582
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":583
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":584
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":585
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":586
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":587
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":588
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":589
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":590
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 590, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":591
 *     data[7] = self._sign[7]*item[7]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":590
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":592
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":574
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 8
 *     cdef ObjVec[myInt8] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":594
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_10clear[] = "PyBspTreeArchive8.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":595
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":596
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":594
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":598
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_12empty[] = "PyBspTreeArchive8.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":599
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":598
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":601
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_14size[] = "PyBspTreeArchive8.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":602
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":601
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":604
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt8]*] vec
 *     cdef ObjVec[myInt8] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_16points[] = "PyBspTreeArchive8.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 604, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 604, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive8_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<8>  const *>  __pyx_v_vec;
  ObjVec<8>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<8>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<8>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<8>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":608
 *     cdef ObjVec[myInt8] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":609
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":610
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":611
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":612
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":613
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":614
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":613
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":616
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyList_New(8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_14, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_14, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_14, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_14, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_14, 7, __pyx_t_13);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_14); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":617
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":604
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt8]*] vec
 *     cdef ObjVec[myInt8] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive8.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":627
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive9, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9___reduce__[] = "PyBspTreeArchive9.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":628
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive9, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive9));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive9));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive9));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":627
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive9, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":630
 *     return (PyBspTreeArchive9, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive9()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":631
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive9()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive9();

  /* "paretoarchive/core.pyx":632
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive9()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":633
 *     self._front = new BspTreeArchive9()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":634
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":635
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":636
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":637
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":638
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":639
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":640
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 * 
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":641
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":630
 *     return (PyBspTreeArchive9, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive9()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":643
 *     self._sign[8] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_4configure[] = "PyBspTreeArchive9.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":644
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":645
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":646
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":647
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":648
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":649
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":650
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":651
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":652
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":643
 *     self._sign[8] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":654
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":655
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":656
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":654
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":658
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 9
 *     cdef ObjVec[myInt9] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_8process[] = "PyBspTreeArchive9.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 658, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 658, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<9>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":659
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 9             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt9] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 659, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 9) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 659, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":662
 *     cdef ObjVec[myInt9] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":663
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":664
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":662
 *     cdef ObjVec[myInt9] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":665
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":666
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":667
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":668
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":669
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":670
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":671
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":672
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":673
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":674
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":675
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 675, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":676
 *     data[8] = self._sign[8]*item[8]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":675
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":677
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":658
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 9
 *     cdef ObjVec[myInt9] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":679
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_10clear[] = "PyBspTreeArchive9.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":680
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":681
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":679
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":683
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_12empty[] = "PyBspTreeArchive9.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":684
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":683
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":686
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_14size[] = "PyBspTreeArchive9.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":687
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":686
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":689
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt9]*] vec
 *     cdef ObjVec[myInt9] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_16points[] = "PyBspTreeArchive9.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 689, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 689, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_17PyBspTreeArchive9_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<9>  const *>  __pyx_v_vec;
  ObjVec<9>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<9>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<9>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<9>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":693
 *     cdef ObjVec[myInt9] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":694
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":695
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":696
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":697
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":698
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":699
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":698
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":701
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyList_New(9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_15, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_15, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_15, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_15, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_15, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_15, 8, __pyx_t_14);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_15); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":702
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":689
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt9]*] vec
 *     cdef ObjVec[myInt9] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive9.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":712
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive10, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10___reduce__[] = "PyBspTreeArchive10.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":713
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive10, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive10));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive10));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive10));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":712
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive10, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":715
 *     return (PyBspTreeArchive10, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive10()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":716
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive10()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive10();

  /* "paretoarchive/core.pyx":717
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive10()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":718
 *     self._front = new BspTreeArchive10()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":719
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":720
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":721
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":722
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":723
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":724
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":725
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":726
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1
 * 
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":727
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 *     self._sign[9] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[9]) = 1;

  /* "paretoarchive/core.pyx":715
 *     return (PyBspTreeArchive10, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive10()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":729
 *     self._sign[9] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_4configure[] = "PyBspTreeArchive10.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":730
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":731
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":732
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":733
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":734
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":735
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":736
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":737
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":738
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":739
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[9]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":729
 *     self._sign[9] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":741
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":742
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":743
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":741
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":745
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 10
 *     cdef ObjVec[myInt10] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_8process[] = "PyBspTreeArchive10.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 745, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 745, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<10>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":746
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 10             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt10] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 746, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 10) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 746, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":749
 *     cdef ObjVec[myInt10] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":750
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":751
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":749
 *     cdef ObjVec[myInt10] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":752
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":753
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":754
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":755
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":756
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":757
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":758
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":759
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":760
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":761
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     data[9] = self._sign[9]*item[9]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":762
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[9])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[9]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":763
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 763, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":764
 *     data[9] = self._sign[9]*item[9]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":763
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":765
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":745
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 10
 *     cdef ObjVec[myInt10] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":767
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_10clear[] = "PyBspTreeArchive10.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":768
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":769
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":767
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":771
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_12empty[] = "PyBspTreeArchive10.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":772
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":771
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":774
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_14size[] = "PyBspTreeArchive10.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":775
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":774
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":777
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt10]*] vec
 *     cdef ObjVec[myInt10] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_16points[] = "PyBspTreeArchive10.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 777, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 777, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 777, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive10_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<10>  const *>  __pyx_v_vec;
  ObjVec<10>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<10>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<10>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<10>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":781
 *     cdef ObjVec[myInt10] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":782
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":783
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":784
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":785
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":786
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":787
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":786
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":789
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyFloat_FromDouble(((__pyx_v_self->_sign[9]) * (__pyx_v_veci[9]))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = PyList_New(10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_16, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_16, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_16, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_16, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_16, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_16, 8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_15);
      PyList_SET_ITEM(__pyx_t_16, 9, __pyx_t_15);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_15 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_16); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 789, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":790
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":777
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt10]*] vec
 *     cdef ObjVec[myInt10] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive10.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":800
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive11, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11___reduce__[] = "PyBspTreeArchive11.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":801
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive11, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive11));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive11));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive11));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":800
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive11, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":803
 *     return (PyBspTreeArchive11, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive11()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":804
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive11()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive11();

  /* "paretoarchive/core.pyx":805
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive11()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":806
 *     self._front = new BspTreeArchive11()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":807
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":808
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":809
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":810
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":811
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":812
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":813
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":814
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":815
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 *     self._sign[9] = 1             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1
 * 
 */
  (__pyx_v_self->_sign[9]) = 1;

  /* "paretoarchive/core.pyx":816
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 *     self._sign[10] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[10]) = 1;

  /* "paretoarchive/core.pyx":803
 *     return (PyBspTreeArchive11, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive11()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":818
 *     self._sign[10] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_4configure[] = "PyBspTreeArchive11.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":819
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":820
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":821
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":822
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":823
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":824
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":825
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":826
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":827
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":828
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[9]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":829
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[10]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":818
 *     self._sign[10] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":831
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":832
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":833
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":831
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":835
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 11
 *     cdef ObjVec[myInt11] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_8process[] = "PyBspTreeArchive11.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 835, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 835, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<11>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":836
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 11             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt11] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 836, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 11) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 836, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":839
 *     cdef ObjVec[myInt11] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":840
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":841
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":839
 *     cdef ObjVec[myInt11] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":842
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":843
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":844
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":845
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":846
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":847
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":848
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":849
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":850
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":851
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":852
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]             # <<<<<<<<<<<<<<
 *     data[10] = self._sign[10]*item[10]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[9])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[9]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":853
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[10]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":854
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 854, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":855
 *     data[10] = self._sign[10]*item[10]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":854
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":856
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":835
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 11
 *     cdef ObjVec[myInt11] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":858
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_10clear[] = "PyBspTreeArchive11.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":859
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":860
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":858
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":862
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_12empty[] = "PyBspTreeArchive11.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":863
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":862
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":865
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_14size[] = "PyBspTreeArchive11.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":866
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":865
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":868
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt11]*] vec
 *     cdef ObjVec[myInt11] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_16points[] = "PyBspTreeArchive11.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 868, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 868, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive11_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<11>  const *>  __pyx_v_vec;
  ObjVec<11>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<11>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<11>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<11>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":872
 *     cdef ObjVec[myInt11] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":873
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":874
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":875
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":876
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":877
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":878
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":877
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":880
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyFloat_FromDouble(((__pyx_v_self->_sign[9]) * (__pyx_v_veci[9]))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = PyFloat_FromDouble(((__pyx_v_self->_sign[10]) * (__pyx_v_veci[10]))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyList_New(11); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_17, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_17, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_17, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_17, 8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_15);
      PyList_SET_ITEM(__pyx_t_17, 9, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyList_SET_ITEM(__pyx_t_17, 10, __pyx_t_16);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_17); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":881
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":868
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt11]*] vec
 *     cdef ObjVec[myInt11] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive11.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":891
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive12, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12___reduce__[] = "PyBspTreeArchive12.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":892
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive12, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive12));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive12));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive12));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":891
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive12, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":894
 *     return (PyBspTreeArchive12, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive12()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":895
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive12()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive12();

  /* "paretoarchive/core.pyx":896
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive12()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":897
 *     self._front = new BspTreeArchive12()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":898
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":899
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":900
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":901
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":902
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":903
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":904
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":905
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":906
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 *     self._sign[9] = 1             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 */
  (__pyx_v_self->_sign[9]) = 1;

  /* "paretoarchive/core.pyx":907
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 *     self._sign[10] = 1             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1
 * 
 */
  (__pyx_v_self->_sign[10]) = 1;

  /* "paretoarchive/core.pyx":908
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 *     self._sign[11] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[11]) = 1;

  /* "paretoarchive/core.pyx":894
 *     return (PyBspTreeArchive12, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive12()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":910
 *     self._sign[11] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_4configure[] = "PyBspTreeArchive12.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":911
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":912
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":913
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":914
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":915
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":916
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":917
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":918
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":919
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":920
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[9]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":921
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[10]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":922
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[11]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":910
 *     self._sign[11] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":924
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":925
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":926
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":924
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":928
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 12
 *     cdef ObjVec[myInt12] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_8process[] = "PyBspTreeArchive12.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 928, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 928, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<12>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":929
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 12             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt12] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 929, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 12) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 929, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":932
 *     cdef ObjVec[myInt12] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":933
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":934
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":932
 *     cdef ObjVec[myInt12] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":935
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 935, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":936
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":937
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":938
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":939
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":940
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":941
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":942
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":943
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":944
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":945
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]             # <<<<<<<<<<<<<<
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[9])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[9]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":946
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]             # <<<<<<<<<<<<<<
 *     data[11] = self._sign[11]*item[11]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[10]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":947
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[11])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[11]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":948
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":949
 *     data[11] = self._sign[11]*item[11]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":948
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":950
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":928
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 12
 *     cdef ObjVec[myInt12] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":952
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_10clear[] = "PyBspTreeArchive12.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":953
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":954
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":952
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":956
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_12empty[] = "PyBspTreeArchive12.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":957
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":956
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":959
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_14size[] = "PyBspTreeArchive12.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":960
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":959
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":962
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt12]*] vec
 *     cdef ObjVec[myInt12] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_16points[] = "PyBspTreeArchive12.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 962, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 962, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive12_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<12>  const *>  __pyx_v_vec;
  ObjVec<12>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<12>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<12>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<12>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":966
 *     cdef ObjVec[myInt12] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":967
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":968
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":969
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":970
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":971
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":972
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 972, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":971
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":974
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyFloat_FromDouble(((__pyx_v_self->_sign[9]) * (__pyx_v_veci[9]))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = PyFloat_FromDouble(((__pyx_v_self->_sign[10]) * (__pyx_v_veci[10]))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyFloat_FromDouble(((__pyx_v_self->_sign[11]) * (__pyx_v_veci[11]))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = PyList_New(12); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_18, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_18, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_18, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_18, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_18, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_18, 8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_15);
      PyList_SET_ITEM(__pyx_t_18, 9, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyList_SET_ITEM(__pyx_t_18, 10, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_17);
      PyList_SET_ITEM(__pyx_t_18, 11, __pyx_t_17);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_17 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_18); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":975
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":962
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt12]*] vec
 *     cdef ObjVec[myInt12] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive12.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":985
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive13, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13___reduce__[] = "PyBspTreeArchive13.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":986
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive13, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive13));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive13));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive13));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":985
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive13, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":988
 *     return (PyBspTreeArchive13, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive13()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":989
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive13()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive13();

  /* "paretoarchive/core.pyx":990
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive13()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":991
 *     self._front = new BspTreeArchive13()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":992
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":993
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":994
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":995
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":996
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":997
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":998
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":999
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":1000
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 *     self._sign[9] = 1             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 */
  (__pyx_v_self->_sign[9]) = 1;

  /* "paretoarchive/core.pyx":1001
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 *     self._sign[10] = 1             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1
 *     self._sign[12] = 1
 */
  (__pyx_v_self->_sign[10]) = 1;

  /* "paretoarchive/core.pyx":1002
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 *     self._sign[11] = 1             # <<<<<<<<<<<<<<
 *     self._sign[12] = 1
 * 
 */
  (__pyx_v_self->_sign[11]) = 1;

  /* "paretoarchive/core.pyx":1003
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 *     self._sign[12] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[12]) = 1;

  /* "paretoarchive/core.pyx":988
 *     return (PyBspTreeArchive13, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive13()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1005
 *     self._sign[12] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_4configure[] = "PyBspTreeArchive13.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":1006
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1007
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1008
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1009
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1010
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1011
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1012
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1013
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1014
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1015
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[9]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1016
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[10]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1017
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[11]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1018
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[12]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1005
 *     self._sign[12] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1020
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":1021
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":1022
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":1020
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":1024
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 13
 *     cdef ObjVec[myInt13] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_8process[] = "PyBspTreeArchive13.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 1024, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1024, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<13>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":1025
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 13             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt13] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1025, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 13) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1025, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":1028
 *     cdef ObjVec[myInt13] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":1029
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":1030
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":1028
 *     cdef ObjVec[myInt13] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":1031
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":1032
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1033
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1034
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1035
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1036
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1037
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1038
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1039
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1040
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1041
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]             # <<<<<<<<<<<<<<
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[9])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[9]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1042
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]             # <<<<<<<<<<<<<<
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[10]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1043
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]             # <<<<<<<<<<<<<<
 *     data[12] = self._sign[12]*item[12]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[11])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[11]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1044
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[12])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[12]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1045
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":1046
 *     data[12] = self._sign[12]*item[12]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":1045
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":1047
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1024
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 13
 *     cdef ObjVec[myInt13] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1049
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_10clear[] = "PyBspTreeArchive13.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":1050
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":1051
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":1049
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1053
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_12empty[] = "PyBspTreeArchive13.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":1054
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1053
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1056
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_14size[] = "PyBspTreeArchive13.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":1057
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1056
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1059
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt13]*] vec
 *     cdef ObjVec[myInt13] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_16points[] = "PyBspTreeArchive13.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 1059, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1059, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1059, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive13_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<13>  const *>  __pyx_v_vec;
  ObjVec<13>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<13>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<13>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<13>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":1063
 *     cdef ObjVec[myInt13] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":1064
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":1065
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":1066
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":1067
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":1068
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":1069
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":1068
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":1071
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyFloat_FromDouble(((__pyx_v_self->_sign[9]) * (__pyx_v_veci[9]))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = PyFloat_FromDouble(((__pyx_v_self->_sign[10]) * (__pyx_v_veci[10]))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyFloat_FromDouble(((__pyx_v_self->_sign[11]) * (__pyx_v_veci[11]))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = PyFloat_FromDouble(((__pyx_v_self->_sign[12]) * (__pyx_v_veci[12]))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = PyList_New(13); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_19, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_19, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_19, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_19, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_19, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_19, 8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_15);
      PyList_SET_ITEM(__pyx_t_19, 9, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyList_SET_ITEM(__pyx_t_19, 10, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_17);
      PyList_SET_ITEM(__pyx_t_19, 11, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_18);
      PyList_SET_ITEM(__pyx_t_19, 12, __pyx_t_18);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_17 = 0;
      __pyx_t_18 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_19); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":1072
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1059
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt13]*] vec
 *     cdef ObjVec[myInt13] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive13.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1082
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive14, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14___reduce__[] = "PyBspTreeArchive14.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":1083
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive14, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive14));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive14));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive14));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1082
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive14, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1085
 *     return (PyBspTreeArchive14, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive14()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":1086
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive14()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive14();

  /* "paretoarchive/core.pyx":1087
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive14()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":1088
 *     self._front = new BspTreeArchive14()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":1089
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":1090
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":1091
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":1092
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":1093
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":1094
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":1095
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":1096
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":1097
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 *     self._sign[9] = 1             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 */
  (__pyx_v_self->_sign[9]) = 1;

  /* "paretoarchive/core.pyx":1098
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 *     self._sign[10] = 1             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1
 *     self._sign[12] = 1
 */
  (__pyx_v_self->_sign[10]) = 1;

  /* "paretoarchive/core.pyx":1099
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 *     self._sign[11] = 1             # <<<<<<<<<<<<<<
 *     self._sign[12] = 1
 *     self._sign[13] = 1
 */
  (__pyx_v_self->_sign[11]) = 1;

  /* "paretoarchive/core.pyx":1100
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 *     self._sign[12] = 1             # <<<<<<<<<<<<<<
 *     self._sign[13] = 1
 * 
 */
  (__pyx_v_self->_sign[12]) = 1;

  /* "paretoarchive/core.pyx":1101
 *     self._sign[11] = 1
 *     self._sign[12] = 1
 *     self._sign[13] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[13]) = 1;

  /* "paretoarchive/core.pyx":1085
 *     return (PyBspTreeArchive14, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive14()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1103
 *     self._sign[13] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_4configure[] = "PyBspTreeArchive14.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":1104
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1105
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1106
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1107
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1108
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1109
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1110
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1111
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1112
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1113
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[9]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1114
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[10]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1115
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[11]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1116
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[12]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1117
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[13]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1103
 *     self._sign[13] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1119
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":1120
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":1121
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":1119
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":1123
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 14
 *     cdef ObjVec[myInt14] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_8process[] = "PyBspTreeArchive14.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 1123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<14>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":1124
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 14             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt14] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1124, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 14) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1124, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":1127
 *     cdef ObjVec[myInt14] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":1128
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":1129
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":1127
 *     cdef ObjVec[myInt14] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":1130
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":1131
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1132
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1133
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1134
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1135
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1136
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1137
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1138
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1139
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1140
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]             # <<<<<<<<<<<<<<
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[9])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[9]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1141
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]             # <<<<<<<<<<<<<<
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[10]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1142
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]             # <<<<<<<<<<<<<<
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[11])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[11]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1143
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]             # <<<<<<<<<<<<<<
 *     data[13] = self._sign[13]*item[13]
 *     if not returnId:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[12])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[12]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1144
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[13])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[13]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1145
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":1146
 *     data[13] = self._sign[13]*item[13]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":1145
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":1147
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1123
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 14
 *     cdef ObjVec[myInt14] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1149
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_10clear[] = "PyBspTreeArchive14.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":1150
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":1151
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":1149
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1153
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_12empty[] = "PyBspTreeArchive14.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":1154
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1153
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1156
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_14size[] = "PyBspTreeArchive14.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":1157
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1156
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1159
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt14]*] vec
 *     cdef ObjVec[myInt14] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_16points[] = "PyBspTreeArchive14.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 1159, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1159, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive14_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<14>  const *>  __pyx_v_vec;
  ObjVec<14>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<14>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<14>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<14>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":1163
 *     cdef ObjVec[myInt14] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":1164
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":1165
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":1166
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":1167
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":1168
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":1169
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12],self._sign[13]*veci[13]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1169, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":1168
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":1171
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12],self._sign[13]*veci[13]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyFloat_FromDouble(((__pyx_v_self->_sign[9]) * (__pyx_v_veci[9]))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = PyFloat_FromDouble(((__pyx_v_self->_sign[10]) * (__pyx_v_veci[10]))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyFloat_FromDouble(((__pyx_v_self->_sign[11]) * (__pyx_v_veci[11]))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = PyFloat_FromDouble(((__pyx_v_self->_sign[12]) * (__pyx_v_veci[12]))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = PyFloat_FromDouble(((__pyx_v_self->_sign[13]) * (__pyx_v_veci[13]))); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_20 = PyList_New(14); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_20, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_20, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_20, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_20, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_20, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_20, 8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_15);
      PyList_SET_ITEM(__pyx_t_20, 9, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyList_SET_ITEM(__pyx_t_20, 10, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_17);
      PyList_SET_ITEM(__pyx_t_20, 11, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_18);
      PyList_SET_ITEM(__pyx_t_20, 12, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_19);
      PyList_SET_ITEM(__pyx_t_20, 13, __pyx_t_19);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_17 = 0;
      __pyx_t_18 = 0;
      __pyx_t_19 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_20); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":1172
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12],self._sign[13]*veci[13]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1159
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt14]*] vec
 *     cdef ObjVec[myInt14] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive14.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1182
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive15, (self._id, self._sign))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15___reduce__[] = "PyBspTreeArchive15.__reduce__(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_1__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15___reduce__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15___reduce__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "paretoarchive/core.pyx":1183
 * 
 *   def __reduce__(self):
 *     return (PyBspTreeArchive15, (self._id, self._sign))             # <<<<<<<<<<<<<<
 * 
 *   def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_int(__pyx_v_self->_sign, 15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive15));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive15));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive15));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1182
 *   cdef int _id
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (PyBspTreeArchive15, (self._id, self._sign))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1185
 *     return (PyBspTreeArchive15, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive15()
 *     self._id = 0
 */

/* Python wrapper */
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_2__cinit__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_2__cinit__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "paretoarchive/core.pyx":1186
 * 
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive15()             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._sign[0] = 1
 */
  __pyx_v_self->_front = new __pyx_t_13paretoarchive_4core_BspTreeArchive15();

  /* "paretoarchive/core.pyx":1187
 *   def __cinit__(self):
 *     self._front = new BspTreeArchive15()
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":1188
 *     self._front = new BspTreeArchive15()
 *     self._id = 0
 *     self._sign[0] = 1             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 */
  (__pyx_v_self->_sign[0]) = 1;

  /* "paretoarchive/core.pyx":1189
 *     self._id = 0
 *     self._sign[0] = 1
 *     self._sign[1] = 1             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 */
  (__pyx_v_self->_sign[1]) = 1;

  /* "paretoarchive/core.pyx":1190
 *     self._sign[0] = 1
 *     self._sign[1] = 1
 *     self._sign[2] = 1             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 */
  (__pyx_v_self->_sign[2]) = 1;

  /* "paretoarchive/core.pyx":1191
 *     self._sign[1] = 1
 *     self._sign[2] = 1
 *     self._sign[3] = 1             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 */
  (__pyx_v_self->_sign[3]) = 1;

  /* "paretoarchive/core.pyx":1192
 *     self._sign[2] = 1
 *     self._sign[3] = 1
 *     self._sign[4] = 1             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 */
  (__pyx_v_self->_sign[4]) = 1;

  /* "paretoarchive/core.pyx":1193
 *     self._sign[3] = 1
 *     self._sign[4] = 1
 *     self._sign[5] = 1             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 */
  (__pyx_v_self->_sign[5]) = 1;

  /* "paretoarchive/core.pyx":1194
 *     self._sign[4] = 1
 *     self._sign[5] = 1
 *     self._sign[6] = 1             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 */
  (__pyx_v_self->_sign[6]) = 1;

  /* "paretoarchive/core.pyx":1195
 *     self._sign[5] = 1
 *     self._sign[6] = 1
 *     self._sign[7] = 1             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 */
  (__pyx_v_self->_sign[7]) = 1;

  /* "paretoarchive/core.pyx":1196
 *     self._sign[6] = 1
 *     self._sign[7] = 1
 *     self._sign[8] = 1             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 */
  (__pyx_v_self->_sign[8]) = 1;

  /* "paretoarchive/core.pyx":1197
 *     self._sign[7] = 1
 *     self._sign[8] = 1
 *     self._sign[9] = 1             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 */
  (__pyx_v_self->_sign[9]) = 1;

  /* "paretoarchive/core.pyx":1198
 *     self._sign[8] = 1
 *     self._sign[9] = 1
 *     self._sign[10] = 1             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1
 *     self._sign[12] = 1
 */
  (__pyx_v_self->_sign[10]) = 1;

  /* "paretoarchive/core.pyx":1199
 *     self._sign[9] = 1
 *     self._sign[10] = 1
 *     self._sign[11] = 1             # <<<<<<<<<<<<<<
 *     self._sign[12] = 1
 *     self._sign[13] = 1
 */
  (__pyx_v_self->_sign[11]) = 1;

  /* "paretoarchive/core.pyx":1200
 *     self._sign[10] = 1
 *     self._sign[11] = 1
 *     self._sign[12] = 1             # <<<<<<<<<<<<<<
 *     self._sign[13] = 1
 *     self._sign[14] = 1
 */
  (__pyx_v_self->_sign[12]) = 1;

  /* "paretoarchive/core.pyx":1201
 *     self._sign[11] = 1
 *     self._sign[12] = 1
 *     self._sign[13] = 1             # <<<<<<<<<<<<<<
 *     self._sign[14] = 1
 * 
 */
  (__pyx_v_self->_sign[13]) = 1;

  /* "paretoarchive/core.pyx":1202
 *     self._sign[12] = 1
 *     self._sign[13] = 1
 *     self._sign[14] = 1             # <<<<<<<<<<<<<<
 * 
 *   def configure(self, config):
 */
  (__pyx_v_self->_sign[14]) = 1;

  /* "paretoarchive/core.pyx":1185
 *     return (PyBspTreeArchive15, (self._id, self._sign))
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     self._front = new BspTreeArchive15()
 *     self._id = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1204
 *     self._sign[14] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_4configure[] = "PyBspTreeArchive15.configure(self, config)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_5configure(PyObject *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_4configure(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self), ((PyObject *)__pyx_v_config));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_4configure(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self, PyObject *__pyx_v_config) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "paretoarchive/core.pyx":1205
 * 
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[0]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1206
 *   def configure(self, config):
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[1]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1207
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[2]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1208
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[3]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1209
 *     self._sign[2] = 1 if config[2] else -1  #1 minimize, -1 maximize
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[4]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1210
 *     self._sign[3] = 1 if config[3] else -1  #1 minimize, -1 maximize
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[5]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1211
 *     self._sign[4] = 1 if config[4] else -1  #1 minimize, -1 maximize
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[6]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1212
 *     self._sign[5] = 1 if config[5] else -1  #1 minimize, -1 maximize
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[7]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1213
 *     self._sign[6] = 1 if config[6] else -1  #1 minimize, -1 maximize
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[8]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1214
 *     self._sign[7] = 1 if config[7] else -1  #1 minimize, -1 maximize
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[9]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1215
 *     self._sign[8] = 1 if config[8] else -1  #1 minimize, -1 maximize
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[10]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1216
 *     self._sign[9] = 1 if config[9] else -1  #1 minimize, -1 maximize
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[11]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1217
 *     self._sign[10] = 1 if config[10] else -1  #1 minimize, -1 maximize
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 *     self._sign[14] = 1 if config[14] else -1  #1 minimize, -1 maximize
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[12]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1218
 *     self._sign[11] = 1 if config[11] else -1  #1 minimize, -1 maximize
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 *     self._sign[14] = 1 if config[14] else -1  #1 minimize, -1 maximize
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[13]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1219
 *     self._sign[12] = 1 if config[12] else -1  #1 minimize, -1 maximize
 *     self._sign[13] = 1 if config[13] else -1  #1 minimize, -1 maximize
 *     self._sign[14] = 1 if config[14] else -1  #1 minimize, -1 maximize             # <<<<<<<<<<<<<<
 * 
 *   def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_config, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = -1;
  }
  (__pyx_v_self->_sign[14]) = __pyx_t_1;

  /* "paretoarchive/core.pyx":1204
 *     self._sign[14] = 1
 * 
 *   def configure(self, config):             # <<<<<<<<<<<<<<
 *     self._sign[0] = 1 if config[0] else -1  #1 minimize, -1 maximize
 *     self._sign[1] = 1 if config[1] else -1  #1 minimize, -1 maximize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1221
 *     self._sign[14] = 1 if config[14] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

/* Python wrapper */
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_6__dealloc__(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_6__dealloc__(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "paretoarchive/core.pyx":1222
 * 
 *   def __dealloc__(self):
 *     del self._front             # <<<<<<<<<<<<<<
 *     self._front = NULL
 * 
 */
  delete __pyx_v_self->_front;

  /* "paretoarchive/core.pyx":1223
 *   def __dealloc__(self):
 *     del self._front
 *     self._front = NULL             # <<<<<<<<<<<<<<
 * 
 *   def process(self, item, customId=None, returnId=False):
 */
  __pyx_v_self->_front = NULL;

  /* "paretoarchive/core.pyx":1221
 *     self._sign[14] = 1 if config[14] else -1  #1 minimize, -1 maximize
 * 
 *   def __dealloc__(self):             # <<<<<<<<<<<<<<
 *     del self._front
 *     self._front = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "paretoarchive/core.pyx":1225
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 15
 *     cdef ObjVec[myInt15] data
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_8process[] = "PyBspTreeArchive15.process(self, item, customId=None, returnId=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_9process(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_customId = 0;
  PyObject *__pyx_v_returnId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_customId,&__pyx_n_s_returnId,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_customId);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnId);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process") < 0)) __PYX_ERR(0, 1225, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_customId = values[1];
    __pyx_v_returnId = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_8process(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self), __pyx_v_item, __pyx_v_customId, __pyx_v_returnId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_8process(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_customId, PyObject *__pyx_v_returnId) {
  ObjVec<15>  __pyx_v_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __Pyx_INCREF(__pyx_v_customId);

  /* "paretoarchive/core.pyx":1226
 * 
 *   def process(self, item, customId=None, returnId=False):
 *     assert len(item) == 15             # <<<<<<<<<<<<<<
 *     cdef ObjVec[myInt15] data
 *     cdef int i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1226, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == 15) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1226, __pyx_L1_error)
    }
  }
  #endif

  /* "paretoarchive/core.pyx":1229
 *     cdef ObjVec[myInt15] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_customId, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "paretoarchive/core.pyx":1230
 *     cdef int i
 *     if customId == None:
 *         customId = self._id             # <<<<<<<<<<<<<<
 *         self._id += 1
 *     data.setId(customId)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_customId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "paretoarchive/core.pyx":1231
 *     if customId == None:
 *         customId = self._id
 *         self._id += 1             # <<<<<<<<<<<<<<
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 */
    __pyx_v_self->_id = (__pyx_v_self->_id + 1);

    /* "paretoarchive/core.pyx":1229
 *     cdef ObjVec[myInt15] data
 *     cdef int i
 *     if customId == None:             # <<<<<<<<<<<<<<
 *         customId = self._id
 *         self._id += 1
 */
  }

  /* "paretoarchive/core.pyx":1232
 *         customId = self._id
 *         self._id += 1
 *     data.setId(customId)             # <<<<<<<<<<<<<<
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_customId); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1232, __pyx_L1_error)
  __pyx_v_data.setId(__pyx_t_4);

  /* "paretoarchive/core.pyx":1233
 *         self._id += 1
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]             # <<<<<<<<<<<<<<
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[0]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1234
 *     data.setId(customId)
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]             # <<<<<<<<<<<<<<
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[1]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1235
 *     data[0] = self._sign[0]*item[0]
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]             # <<<<<<<<<<<<<<
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[2]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1236
 *     data[1] = self._sign[1]*item[1]
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]             # <<<<<<<<<<<<<<
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[3]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1237
 *     data[2] = self._sign[2]*item[2]
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]             # <<<<<<<<<<<<<<
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[4]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1238
 *     data[3] = self._sign[3]*item[3]
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]             # <<<<<<<<<<<<<<
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[5])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[5]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1239
 *     data[4] = self._sign[4]*item[4]
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]             # <<<<<<<<<<<<<<
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[6]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1240
 *     data[5] = self._sign[5]*item[5]
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]             # <<<<<<<<<<<<<<
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[7])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[7]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1241
 *     data[6] = self._sign[6]*item[6]
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]             # <<<<<<<<<<<<<<
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[8]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1242
 *     data[7] = self._sign[7]*item[7]
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]             # <<<<<<<<<<<<<<
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[9])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[9]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1243
 *     data[8] = self._sign[8]*item[8]
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]             # <<<<<<<<<<<<<<
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[10]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1244
 *     data[9] = self._sign[9]*item[9]
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]             # <<<<<<<<<<<<<<
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[11])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[11]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1245
 *     data[10] = self._sign[10]*item[10]
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]             # <<<<<<<<<<<<<<
 *     data[13] = self._sign[13]*item[13]
 *     data[14] = self._sign[14]*item[14]
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[12])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[12]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1246
 *     data[11] = self._sign[11]*item[11]
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]             # <<<<<<<<<<<<<<
 *     data[14] = self._sign[14]*item[14]
 *     if not returnId:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[13])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_data[13]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1247
 *     data[12] = self._sign[12]*item[12]
 *     data[13] = self._sign[13]*item[13]
 *     data[14] = self._sign[14]*item[14]             # <<<<<<<<<<<<<<
 *     if not returnId:
 *           return self._front.process(data)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->_sign[14])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_item, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_data[14]) = __pyx_t_7;

  /* "paretoarchive/core.pyx":1248
 *     data[13] = self._sign[13]*item[13]
 *     data[14] = self._sign[14]*item[14]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_returnId); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __pyx_t_8 = ((!__pyx_t_3) != 0);
  if (__pyx_t_8) {

    /* "paretoarchive/core.pyx":1249
 *     data[14] = self._sign[14]*item[14]
 *     if not returnId:
 *           return self._front.process(data)             # <<<<<<<<<<<<<<
 *     return (self._front.process(data), customId)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":1248
 *     data[13] = self._sign[13]*item[13]
 *     data[14] = self._sign[14]*item[14]
 *     if not returnId:             # <<<<<<<<<<<<<<
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)
 */
  }

  /* "paretoarchive/core.pyx":1250
 *     if not returnId:
 *           return self._front.process(data)
 *     return (self._front.process(data), customId)             # <<<<<<<<<<<<<<
 * 
 *   def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->process(__pyx_v_data)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_customId);
  __Pyx_GIVEREF(__pyx_v_customId);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_customId);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1225
 *     self._front = NULL
 * 
 *   def process(self, item, customId=None, returnId=False):             # <<<<<<<<<<<<<<
 *     assert len(item) == 15
 *     cdef ObjVec[myInt15] data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_customId);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1252
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_10clear[] = "PyBspTreeArchive15.clear(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_10clear(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_10clear(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "paretoarchive/core.pyx":1253
 * 
 *   def clear(self):
 *     self._id = 0             # <<<<<<<<<<<<<<
 *     self._front.clear()
 * 
 */
  __pyx_v_self->_id = 0;

  /* "paretoarchive/core.pyx":1254
 *   def clear(self):
 *     self._id = 0
 *     self._front.clear()             # <<<<<<<<<<<<<<
 * 
 *   def empty(self):
 */
  __pyx_v_self->_front->clear();

  /* "paretoarchive/core.pyx":1252
 *     return (self._front.process(data), customId)
 * 
 *   def clear(self):             # <<<<<<<<<<<<<<
 *     self._id = 0
 *     self._front.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1256
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_12empty[] = "PyBspTreeArchive15.empty(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("empty (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_12empty(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_12empty(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty", 0);

  /* "paretoarchive/core.pyx":1257
 * 
 *   def empty(self):
 *     return self._front.empty()             # <<<<<<<<<<<<<<
 * 
 *   def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_front->empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1256
 *     self._front.clear()
 * 
 *   def empty(self):             # <<<<<<<<<<<<<<
 *     return self._front.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1259
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_14size[] = "PyBspTreeArchive15.size(self)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_15size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_14size(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_14size(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "paretoarchive/core.pyx":1260
 * 
 *   def size(self):
 *     return self._front.size()             # <<<<<<<<<<<<<<
 * 
 *   def points(self, bool returnIds=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_front->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1259
 *     return self._front.empty()
 * 
 *   def size(self):             # <<<<<<<<<<<<<<
 *     return self._front.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1262
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt15]*] vec
 *     cdef ObjVec[myInt15] veci
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_16points[] = "PyBspTreeArchive15.points(self, bool returnIds=False)";
static PyObject *__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_17points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_returnIds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_returnIds,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "points") < 0)) __PYX_ERR(0, 1262, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_returnIds = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_returnIds == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1262, __pyx_L3_error)
    } else {
      __pyx_v_returnIds = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("points", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_16points(((struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *)__pyx_v_self), __pyx_v_returnIds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_18PyBspTreeArchive15_16points(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15 *__pyx_v_self, bool __pyx_v_returnIds) {
  std::vector<ObjVec<15>  const *>  __pyx_v_vec;
  ObjVec<15>  __pyx_v_veci;
  int __pyx_v_i;
  PyObject *__pyx_v_res = NULL;
  ObjVec<15>  const *__pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ObjVec<15>  const *> ::size_type __pyx_t_2;
  std::vector<ObjVec<15>  const *> ::size_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("points", 0);

  /* "paretoarchive/core.pyx":1266
 *     cdef ObjVec[myInt15] veci
 *     cdef int i
 *     vec = self._front.points()             # <<<<<<<<<<<<<<
 *     res = []
 *     for i in range(0,vec.size()):
 */
  __pyx_v_vec = __pyx_v_self->_front->points();

  /* "paretoarchive/core.pyx":1267
 *     cdef int i
 *     vec = self._front.points()
 *     res = []             # <<<<<<<<<<<<<<
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":1268
 *     vec = self._front.points()
 *     res = []
 *     for i in range(0,vec.size()):             # <<<<<<<<<<<<<<
 *         val = vec[i]
 *         veci = val[0]
 */
  __pyx_t_2 = __pyx_v_vec.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "paretoarchive/core.pyx":1269
 *     res = []
 *     for i in range(0,vec.size()):
 *         val = vec[i]             # <<<<<<<<<<<<<<
 *         veci = val[0]
 *         if returnIds:
 */
    __pyx_v_val = (__pyx_v_vec[__pyx_v_i]);

    /* "paretoarchive/core.pyx":1270
 *     for i in range(0,vec.size()):
 *         val = vec[i]
 *         veci = val[0]             # <<<<<<<<<<<<<<
 *         if returnIds:
 *             res.append(veci.getId())
 */
    __pyx_v_veci = (__pyx_v_val[0]);

    /* "paretoarchive/core.pyx":1271
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
    __pyx_t_5 = (__pyx_v_returnIds != 0);
    if (__pyx_t_5) {

      /* "paretoarchive/core.pyx":1272
 *         veci = val[0]
 *         if returnIds:
 *             res.append(veci.getId())             # <<<<<<<<<<<<<<
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12],self._sign[13]*veci[13],self._sign[14]*veci[14]])
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_veci.getId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "paretoarchive/core.pyx":1271
 *         val = vec[i]
 *         veci = val[0]
 *         if returnIds:             # <<<<<<<<<<<<<<
 *             res.append(veci.getId())
 *         else:
 */
      goto __pyx_L5;
    }

    /* "paretoarchive/core.pyx":1274
 *             res.append(veci.getId())
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12],self._sign[13]*veci[13],self._sign[14]*veci[14]])             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->_sign[0]) * (__pyx_v_veci[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->_sign[1]) * (__pyx_v_veci[1]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->_sign[2]) * (__pyx_v_veci[2]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->_sign[3]) * (__pyx_v_veci[3]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyFloat_FromDouble(((__pyx_v_self->_sign[4]) * (__pyx_v_veci[4]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_self->_sign[5]) * (__pyx_v_veci[5]))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_self->_sign[6]) * (__pyx_v_veci[6]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(((__pyx_v_self->_sign[7]) * (__pyx_v_veci[7]))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyFloat_FromDouble(((__pyx_v_self->_sign[8]) * (__pyx_v_veci[8]))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = PyFloat_FromDouble(((__pyx_v_self->_sign[9]) * (__pyx_v_veci[9]))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = PyFloat_FromDouble(((__pyx_v_self->_sign[10]) * (__pyx_v_veci[10]))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyFloat_FromDouble(((__pyx_v_self->_sign[11]) * (__pyx_v_veci[11]))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = PyFloat_FromDouble(((__pyx_v_self->_sign[12]) * (__pyx_v_veci[12]))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = PyFloat_FromDouble(((__pyx_v_self->_sign[13]) * (__pyx_v_veci[13]))); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_20 = PyFloat_FromDouble(((__pyx_v_self->_sign[14]) * (__pyx_v_veci[14]))); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_21 = PyList_New(15); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_21, 3, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_21, 4, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_21, 5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_21, 6, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_21, 7, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_21, 8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_15);
      PyList_SET_ITEM(__pyx_t_21, 9, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyList_SET_ITEM(__pyx_t_21, 10, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_17);
      PyList_SET_ITEM(__pyx_t_21, 11, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_18);
      PyList_SET_ITEM(__pyx_t_21, 12, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_19);
      PyList_SET_ITEM(__pyx_t_21, 13, __pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_20);
      PyList_SET_ITEM(__pyx_t_21, 14, __pyx_t_20);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_14 = 0;
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_17 = 0;
      __pyx_t_18 = 0;
      __pyx_t_19 = 0;
      __pyx_t_20 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_21); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    }
    __pyx_L5:;
  }

  /* "paretoarchive/core.pyx":1275
 *         else:
 *             res.append([self._sign[0]*veci[0],self._sign[1]*veci[1],self._sign[2]*veci[2],self._sign[3]*veci[3],self._sign[4]*veci[4],self._sign[5]*veci[5],self._sign[6]*veci[6],self._sign[7]*veci[7],self._sign[8]*veci[8],self._sign[9]*veci[9],self._sign[10]*veci[10],self._sign[11]*veci[11],self._sign[12]*veci[12],self._sign[13]*veci[13],self._sign[14]*veci[14]])
 *     return res             # <<<<<<<<<<<<<<
 * 
 * OBJ2CLASS = {2:PyBspTreeArchive2,3:PyBspTreeArchive3,4:PyBspTreeArchive4,5:PyBspTreeArchive5,6:PyBspTreeArchive6,7:PyBspTreeArchive7,8:PyBspTreeArchive8,9:PyBspTreeArchive9,10:PyBspTreeArchive10,11:PyBspTreeArchive11,12:PyBspTreeArchive12,13:PyBspTreeArchive13,14:PyBspTreeArchive14,15:PyBspTreeArchive15}
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1262
 *     return self._front.size()
 * 
 *   def points(self, bool returnIds=False):             # <<<<<<<<<<<<<<
 *     cdef vector[const ObjVec[myInt15]*] vec
 *     cdef ObjVec[myInt15] veci
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive15.points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1282
 * 
 * class PyBspTreeArchive:
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):             # <<<<<<<<<<<<<<
 *       if (objectives < 2) or (objectives > MAXOBJ):
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_16PyBspTreeArchive_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_16PyBspTreeArchive___init__[] = "PyBspTreeArchive.__init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True)";
static PyMethodDef __pyx_mdef_13paretoarchive_4core_16PyBspTreeArchive_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_16PyBspTreeArchive_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_16PyBspTreeArchive___init__};
static PyObject *__pyx_pw_13paretoarchive_4core_16PyBspTreeArchive_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_objectives = 0;
  PyObject *__pyx_v_minimizeObjective1 = 0;
  PyObject *__pyx_v_minimizeObjective2 = 0;
  PyObject *__pyx_v_minimizeObjective3 = 0;
  PyObject *__pyx_v_minimizeObjective4 = 0;
  PyObject *__pyx_v_minimizeObjective5 = 0;
  PyObject *__pyx_v_minimizeObjective6 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_objectives,&__pyx_n_s_minimizeObjective1,&__pyx_n_s_minimizeObjective2,&__pyx_n_s_minimizeObjective3,&__pyx_n_s_minimizeObjective4,&__pyx_n_s_minimizeObjective5,&__pyx_n_s_minimizeObjective6,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)((PyObject *)__pyx_int_3));
    values[2] = ((PyObject *)((PyObject *)Py_True));
    values[3] = ((PyObject *)((PyObject *)Py_True));
    values[4] = ((PyObject *)((PyObject *)Py_True));
    values[5] = ((PyObject *)((PyObject *)Py_True));
    values[6] = ((PyObject *)((PyObject *)Py_True));
    values[7] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objectives);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimizeObjective1);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimizeObjective2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimizeObjective3);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimizeObjective4);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimizeObjective5);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimizeObjective6);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1282, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_objectives = values[1];
    __pyx_v_minimizeObjective1 = values[2];
    __pyx_v_minimizeObjective2 = values[3];
    __pyx_v_minimizeObjective3 = values[4];
    __pyx_v_minimizeObjective4 = values[5];
    __pyx_v_minimizeObjective5 = values[6];
    __pyx_v_minimizeObjective6 = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_16PyBspTreeArchive___init__(__pyx_self, __pyx_v_self, __pyx_v_objectives, __pyx_v_minimizeObjective1, __pyx_v_minimizeObjective2, __pyx_v_minimizeObjective3, __pyx_v_minimizeObjective4, __pyx_v_minimizeObjective5, __pyx_v_minimizeObjective6);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_16PyBspTreeArchive___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_objectives, PyObject *__pyx_v_minimizeObjective1, PyObject *__pyx_v_minimizeObjective2, PyObject *__pyx_v_minimizeObjective3, PyObject *__pyx_v_minimizeObjective4, PyObject *__pyx_v_minimizeObjective5, PyObject *__pyx_v_minimizeObjective6) {
  PyObject *__pyx_7genexpr__pyx_v_a = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "paretoarchive/core.pyx":1283
 * class PyBspTreeArchive:
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):
 *       if (objectives < 2) or (objectives > MAXOBJ):             # <<<<<<<<<<<<<<
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 *       self._archive = OBJ2CLASS[objectives]()
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_objectives, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MAXOBJ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_objectives, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "paretoarchive/core.pyx":1284
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):
 *       if (objectives < 2) or (objectives > MAXOBJ):
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))             # <<<<<<<<<<<<<<
 *       self._archive = OBJ2CLASS[objectives]()
 *       self._archive.configure([minimizeObjective1,minimizeObjective2,minimizeObjective3,minimizeObjective4,minimizeObjective5,minimizeObjective6])
 */
    __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_number_of_objectives_Onl);
    __pyx_t_5 += 35;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_number_of_objectives_Onl);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Invalid_number_of_objectives_Onl);
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_MAXOBJ); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1284, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1284, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_int_2);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1284, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1284, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1284, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1284, __pyx_L8_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1284, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1284, __pyx_L8_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1284, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_10(__pyx_t_8);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1284, __pyx_L8_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_a, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_7genexpr__pyx_v_a); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1284, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1284, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_a); __pyx_7genexpr__pyx_v_a = 0;
      goto __pyx_L11_exit_scope;
      __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_a); __pyx_7genexpr__pyx_v_a = 0;
      goto __pyx_L1_error;
      __pyx_L11_exit_scope:;
    } /* exit inner scope */
    __pyx_t_8 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_and);
    __pyx_t_5 += 5;
    __Pyx_GIVEREF(__pyx_kp_u_and);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_and);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_MAXOBJ); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_supported);
    __pyx_t_5 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_is_supported);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_is_supported);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1284, __pyx_L1_error)

    /* "paretoarchive/core.pyx":1283
 * class PyBspTreeArchive:
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):
 *       if (objectives < 2) or (objectives > MAXOBJ):             # <<<<<<<<<<<<<<
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 *       self._archive = OBJ2CLASS[objectives]()
 */
  }

  /* "paretoarchive/core.pyx":1285
 *       if (objectives < 2) or (objectives > MAXOBJ):
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 *       self._archive = OBJ2CLASS[objectives]()             # <<<<<<<<<<<<<<
 *       self._archive.configure([minimizeObjective1,minimizeObjective2,minimizeObjective3,minimizeObjective4,minimizeObjective5,minimizeObjective6])
 *       self.process = self._archive.process
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OBJ2CLASS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_objectives); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_archive, __pyx_t_4) < 0) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "paretoarchive/core.pyx":1286
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 *       self._archive = OBJ2CLASS[objectives]()
 *       self._archive.configure([minimizeObjective1,minimizeObjective2,minimizeObjective3,minimizeObjective4,minimizeObjective5,minimizeObjective6])             # <<<<<<<<<<<<<<
 *       self.process = self._archive.process
 *       self.empty = self._archive.empty
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_archive); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_configure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyList_New(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_minimizeObjective1);
  __Pyx_GIVEREF(__pyx_v_minimizeObjective1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_minimizeObjective1);
  __Pyx_INCREF(__pyx_v_minimizeObjective2);
  __Pyx_GIVEREF(__pyx_v_minimizeObjective2);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_v_minimizeObjective2);
  __Pyx_INCREF(__pyx_v_minimizeObjective3);
  __Pyx_GIVEREF(__pyx_v_minimizeObjective3);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_v_minimizeObjective3);
  __Pyx_INCREF(__pyx_v_minimizeObjective4);
  __Pyx_GIVEREF(__pyx_v_minimizeObjective4);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_v_minimizeObjective4);
  __Pyx_INCREF(__pyx_v_minimizeObjective5);
  __Pyx_GIVEREF(__pyx_v_minimizeObjective5);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_v_minimizeObjective5);
  __Pyx_INCREF(__pyx_v_minimizeObjective6);
  __Pyx_GIVEREF(__pyx_v_minimizeObjective6);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_v_minimizeObjective6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "paretoarchive/core.pyx":1287
 *       self._archive = OBJ2CLASS[objectives]()
 *       self._archive.configure([minimizeObjective1,minimizeObjective2,minimizeObjective3,minimizeObjective4,minimizeObjective5,minimizeObjective6])
 *       self.process = self._archive.process             # <<<<<<<<<<<<<<
 *       self.empty = self._archive.empty
 *       self.clear = self._archive.clear
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_archive); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_process, __pyx_t_2) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "paretoarchive/core.pyx":1288
 *       self._archive.configure([minimizeObjective1,minimizeObjective2,minimizeObjective3,minimizeObjective4,minimizeObjective5,minimizeObjective6])
 *       self.process = self._archive.process
 *       self.empty = self._archive.empty             # <<<<<<<<<<<<<<
 *       self.clear = self._archive.clear
 *       self.size = self._archive.size
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_archive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_empty, __pyx_t_4) < 0) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "paretoarchive/core.pyx":1289
 *       self.process = self._archive.process
 *       self.empty = self._archive.empty
 *       self.clear = self._archive.clear             # <<<<<<<<<<<<<<
 *       self.size = self._archive.size
 *       self.points = self._archive.points
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_archive); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_clear, __pyx_t_2) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "paretoarchive/core.pyx":1290
 *       self.empty = self._archive.empty
 *       self.clear = self._archive.clear
 *       self.size = self._archive.size             # <<<<<<<<<<<<<<
 *       self.points = self._archive.points
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_archive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_size, __pyx_t_4) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "paretoarchive/core.pyx":1291
 *       self.clear = self._archive.clear
 *       self.size = self._archive.size
 *       self.points = self._archive.points             # <<<<<<<<<<<<<<
 * 
 *    def filter(self, data, returnIds=False, sortKey=None):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_archive); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_points); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_points, __pyx_t_2) < 0) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "paretoarchive/core.pyx":1282
 * 
 * class PyBspTreeArchive:
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):             # <<<<<<<<<<<<<<
 *       if (objectives < 2) or (objectives > MAXOBJ):
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "paretoarchive/core.pyx":1293
 *       self.points = self._archive.points
 * 
 *    def filter(self, data, returnIds=False, sortKey=None):             # <<<<<<<<<<<<<<
 *      self.clear()
 *      for i, d in enumerate(data):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13paretoarchive_4core_16PyBspTreeArchive_3filter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13paretoarchive_4core_16PyBspTreeArchive_2filter[] = "PyBspTreeArchive.filter(self, data, returnIds=False, sortKey=None)";
static PyMethodDef __pyx_mdef_13paretoarchive_4core_16PyBspTreeArchive_3filter = {"filter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_16PyBspTreeArchive_3filter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_16PyBspTreeArchive_2filter};
static PyObject *__pyx_pw_13paretoarchive_4core_16PyBspTreeArchive_3filter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_returnIds = 0;
  PyObject *__pyx_v_sortKey = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_returnIds,&__pyx_n_s_sortKey,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_False));
    values[3] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter", 0, 2, 4, 1); __PYX_ERR(0, 1293, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_returnIds);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sortKey);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "filter") < 0)) __PYX_ERR(0, 1293, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_returnIds = values[2];
    __pyx_v_sortKey = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1293, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive.filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13paretoarchive_4core_16PyBspTreeArchive_2filter(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_returnIds, __pyx_v_sortKey);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13paretoarchive_4core_16PyBspTreeArchive_2filter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_returnIds, PyObject *__pyx_v_sortKey) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_pts = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter", 0);

  /* "paretoarchive/core.pyx":1294
 * 
 *    def filter(self, data, returnIds=False, sortKey=None):
 *      self.clear()             # <<<<<<<<<<<<<<
 *      for i, d in enumerate(data):
 *         self.process(d, customId=i)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":1295
 *    def filter(self, data, returnIds=False, sortKey=None):
 *      self.clear()
 *      for i, d in enumerate(data):             # <<<<<<<<<<<<<<
 *         self.process(d, customId=i)
 *      pts = self.points(returnIds=returnIds)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_data)) || PyTuple_CheckExact(__pyx_v_data)) {
    __pyx_t_2 = __pyx_v_data; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1295, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1295, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "paretoarchive/core.pyx":1296
 *      self.clear()
 *      for i, d in enumerate(data):
 *         self.process(d, customId=i)             # <<<<<<<<<<<<<<
 *      pts = self.points(returnIds=returnIds)
 *      if sortKey == None:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_process); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_d);
    __Pyx_GIVEREF(__pyx_v_d);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_d);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_customId, __pyx_v_i) < 0) __PYX_ERR(0, 1296, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "paretoarchive/core.pyx":1295
 *    def filter(self, data, returnIds=False, sortKey=None):
 *      self.clear()
 *      for i, d in enumerate(data):             # <<<<<<<<<<<<<<
 *         self.process(d, customId=i)
 *      pts = self.points(returnIds=returnIds)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":1297
 *      for i, d in enumerate(data):
 *         self.process(d, customId=i)
 *      pts = self.points(returnIds=returnIds)             # <<<<<<<<<<<<<<
 *      if sortKey == None:
 *         return pts
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_returnIds, __pyx_v_returnIds) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pts = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "paretoarchive/core.pyx":1298
 *         self.process(d, customId=i)
 *      pts = self.points(returnIds=returnIds)
 *      if sortKey == None:             # <<<<<<<<<<<<<<
 *         return pts
 *      return sorted(pts, key = sortKey)
 */
  __pyx_t_8 = PyObject_RichCompare(__pyx_v_sortKey, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_9) {

    /* "paretoarchive/core.pyx":1299
 *      pts = self.points(returnIds=returnIds)
 *      if sortKey == None:
 *         return pts             # <<<<<<<<<<<<<<
 *      return sorted(pts, key = sortKey)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pts);
    __pyx_r = __pyx_v_pts;
    goto __pyx_L0;

    /* "paretoarchive/core.pyx":1298
 *         self.process(d, customId=i)
 *      pts = self.points(returnIds=returnIds)
 *      if sortKey == None:             # <<<<<<<<<<<<<<
 *         return pts
 *      return sorted(pts, key = sortKey)
 */
  }

  /* "paretoarchive/core.pyx":1300
 *      if sortKey == None:
 *         return pts
 *      return sorted(pts, key = sortKey)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_pts);
  __Pyx_GIVEREF(__pyx_v_pts);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_pts);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_v_sortKey) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "paretoarchive/core.pyx":1293
 *       self.points = self._archive.points
 * 
 *    def filter(self, data, returnIds=False, sortKey=None):             # <<<<<<<<<<<<<<
 *      self.clear()
 *      for i, d in enumerate(data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("paretoarchive.core.PyBspTreeArchive.filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_pts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_int")
 * cdef inline list __Pyx_carray_to_py_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_int(int *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_int", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_int")
 * cdef inline list __Pyx_carray_to_py_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_int")
 * cdef inline tuple __Pyx_carray_to_tuple_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_int(int *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_int", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_int")
 * cdef inline tuple __Pyx_carray_to_tuple_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive1(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive1[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive1_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive1_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive1", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive1, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive1, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive2(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive2[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive2_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive2_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive2", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive2, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive3(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive3(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive3[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive3_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive3_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive3", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive3, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive4(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive4(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive4[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive4_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive4_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive4", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive4, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive5(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive5(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive5[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive5_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive5_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive5 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive5", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive5), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive5, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive5, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive5, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive6(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive6(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive6[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive6_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive6_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive6 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive6", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive6), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive6, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive6, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive6, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive7(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive7(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive7[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive7_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive7_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive7 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive7", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive7), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive7, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive7, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive7, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive8(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive8(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive8[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive8_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive8_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive8 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive8", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive8), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive8, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive8, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive8, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive9(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive9(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive9[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_5configure, METH_O, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_17PyBspTreeArchive9_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_17PyBspTreeArchive9_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive9 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive9", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive9), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive9, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive9, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive9, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive10(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive10(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive10[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_5configure, METH_O, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive10_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive10_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive10 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive10", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive10), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive10, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive10, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive10, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive11(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive11(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive11[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_5configure, METH_O, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive11_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive11_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive11 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive11", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive11), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive11, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive11, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive11, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive12(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive12(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive12[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_5configure, METH_O, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive12_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive12_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive12 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive12", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive12), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive12, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive12, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive12, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive13(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive13(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive13[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_5configure, METH_O, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive13_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive13_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive13 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive13", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive13), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive13, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive13, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive13, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive14(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive14(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive14[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_5configure, METH_O, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive14_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive14_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive14 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive14", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive14), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive14, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive14, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive14, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive15(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive15(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13paretoarchive_4core_PyBspTreeArchive15[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_1__reduce__, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15___reduce__},
  {"configure", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_5configure, METH_O, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_4configure},
  {"process", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_9process, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_8process},
  {"clear", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_11clear, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_10clear},
  {"empty", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_13empty, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_12empty},
  {"size", (PyCFunction)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_15size, METH_NOARGS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_14size},
  {"points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13paretoarchive_4core_18PyBspTreeArchive15_17points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13paretoarchive_4core_18PyBspTreeArchive15_16points},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13paretoarchive_4core_PyBspTreeArchive15 = {
  PyVarObject_HEAD_INIT(0, 0)
  "paretoarchive.core.PyBspTreeArchive15", /*tp_name*/
  sizeof(struct __pyx_obj_13paretoarchive_4core_PyBspTreeArchive15), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13paretoarchive_4core_PyBspTreeArchive15, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13paretoarchive_4core_PyBspTreeArchive15, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13paretoarchive_4core_PyBspTreeArchive15, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "core",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_number_of_objectives_Onl, __pyx_k_Invalid_number_of_objectives_Onl, sizeof(__pyx_k_Invalid_number_of_objectives_Onl), 0, 1, 0, 0},
  {&__pyx_n_s_MAXOBJ, __pyx_k_MAXOBJ, sizeof(__pyx_k_MAXOBJ), 0, 0, 1, 1},
  {&__pyx_n_s_OBJ2CLASS, __pyx_k_OBJ2CLASS, sizeof(__pyx_k_OBJ2CLASS), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive, __pyx_k_PyBspTreeArchive, sizeof(__pyx_k_PyBspTreeArchive), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive1, __pyx_k_PyBspTreeArchive1, sizeof(__pyx_k_PyBspTreeArchive1), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive10, __pyx_k_PyBspTreeArchive10, sizeof(__pyx_k_PyBspTreeArchive10), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive11, __pyx_k_PyBspTreeArchive11, sizeof(__pyx_k_PyBspTreeArchive11), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive12, __pyx_k_PyBspTreeArchive12, sizeof(__pyx_k_PyBspTreeArchive12), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive13, __pyx_k_PyBspTreeArchive13, sizeof(__pyx_k_PyBspTreeArchive13), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive14, __pyx_k_PyBspTreeArchive14, sizeof(__pyx_k_PyBspTreeArchive14), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive15, __pyx_k_PyBspTreeArchive15, sizeof(__pyx_k_PyBspTreeArchive15), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive2, __pyx_k_PyBspTreeArchive2, sizeof(__pyx_k_PyBspTreeArchive2), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive3, __pyx_k_PyBspTreeArchive3, sizeof(__pyx_k_PyBspTreeArchive3), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive4, __pyx_k_PyBspTreeArchive4, sizeof(__pyx_k_PyBspTreeArchive4), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive5, __pyx_k_PyBspTreeArchive5, sizeof(__pyx_k_PyBspTreeArchive5), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive6, __pyx_k_PyBspTreeArchive6, sizeof(__pyx_k_PyBspTreeArchive6), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive7, __pyx_k_PyBspTreeArchive7, sizeof(__pyx_k_PyBspTreeArchive7), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive8, __pyx_k_PyBspTreeArchive8, sizeof(__pyx_k_PyBspTreeArchive8), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive9, __pyx_k_PyBspTreeArchive9, sizeof(__pyx_k_PyBspTreeArchive9), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive___init, __pyx_k_PyBspTreeArchive___init, sizeof(__pyx_k_PyBspTreeArchive___init), 0, 0, 1, 1},
  {&__pyx_n_s_PyBspTreeArchive_filter, __pyx_k_PyBspTreeArchive_filter, sizeof(__pyx_k_PyBspTreeArchive_filter), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_kp_u_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0, 0},
  {&__pyx_n_s_archive, __pyx_k_archive, sizeof(__pyx_k_archive), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_configure, __pyx_k_configure, sizeof(__pyx_k_configure), 0, 0, 1, 1},
  {&__pyx_n_s_customId, __pyx_k_customId, sizeof(__pyx_k_customId), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_u_is_supported, __pyx_k_is_supported, sizeof(__pyx_k_is_supported), 0, 1, 0, 0},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_minimizeObjective1, __pyx_k_minimizeObjective1, sizeof(__pyx_k_minimizeObjective1), 0, 0, 1, 1},
  {&__pyx_n_s_minimizeObjective2, __pyx_k_minimizeObjective2, sizeof(__pyx_k_minimizeObjective2), 0, 0, 1, 1},
  {&__pyx_n_s_minimizeObjective3, __pyx_k_minimizeObjective3, sizeof(__pyx_k_minimizeObjective3), 0, 0, 1, 1},
  {&__pyx_n_s_minimizeObjective4, __pyx_k_minimizeObjective4, sizeof(__pyx_k_minimizeObjective4), 0, 0, 1, 1},
  {&__pyx_n_s_minimizeObjective5, __pyx_k_minimizeObjective5, sizeof(__pyx_k_minimizeObjective5), 0, 0, 1, 1},
  {&__pyx_n_s_minimizeObjective6, __pyx_k_minimizeObjective6, sizeof(__pyx_k_minimizeObjective6), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_objectives, __pyx_k_objectives, sizeof(__pyx_k_objectives), 0, 0, 1, 1},
  {&__pyx_n_s_paretoarchive_core, __pyx_k_paretoarchive_core, sizeof(__pyx_k_paretoarchive_core), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_process, __pyx_k_process, sizeof(__pyx_k_process), 0, 0, 1, 1},
  {&__pyx_n_s_pts, __pyx_k_pts, sizeof(__pyx_k_pts), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_returnId, __pyx_k_returnId, sizeof(__pyx_k_returnId), 0, 0, 1, 1},
  {&__pyx_n_s_returnIds, __pyx_k_returnIds, sizeof(__pyx_k_returnIds), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sortKey, __pyx_k_sortKey, sizeof(__pyx_k_sortKey), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_kp_s_src_paretoarchive_core_pyx, __pyx_k_src_paretoarchive_core_pyx, sizeof(__pyx_k_src_paretoarchive_core_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1295, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 1300, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "paretoarchive/core.pyx":1282
 * 
 * class PyBspTreeArchive:
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):             # <<<<<<<<<<<<<<
 *       if (objectives < 2) or (objectives > MAXOBJ):
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 */
  __pyx_tuple__2 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_objectives, __pyx_n_s_minimizeObjective1, __pyx_n_s_minimizeObjective2, __pyx_n_s_minimizeObjective3, __pyx_n_s_minimizeObjective4, __pyx_n_s_minimizeObjective5, __pyx_n_s_minimizeObjective6, __pyx_n_s_a); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_paretoarchive_core_pyx, __pyx_n_s_init, 1282, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __pyx_tuple__4 = PyTuple_Pack(7, ((PyObject *)__pyx_int_3), ((PyObject *)Py_True), ((PyObject *)Py_True), ((PyObject *)Py_True), ((PyObject *)Py_True), ((PyObject *)Py_True), ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "paretoarchive/core.pyx":1293
 *       self.points = self._archive.points
 * 
 *    def filter(self, data, returnIds=False, sortKey=None):             # <<<<<<<<<<<<<<
 *      self.clear()
 *      for i, d in enumerate(data):
 */
  __pyx_tuple__5 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_returnIds, __pyx_n_s_sortKey, __pyx_n_s_i, __pyx_n_s_d, __pyx_n_s_pts); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_paretoarchive_core_pyx, __pyx_n_s_filter, 1293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __pyx_tuple__7 = PyTuple_Pack(2, ((PyObject *)Py_False), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  __Pyx_init_assertions_enabled();

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive1.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive1.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive1.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive1.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive1, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive1 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive1;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive2) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive2.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive2, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive2) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive2 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive2;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive3) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive3.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive3, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive3) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive3 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive3;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive4) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive4.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive4, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive4) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive4 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive4;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive5) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive5.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive5.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive5.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive5.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive5, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive5) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive5 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive5;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive6) < 0) __PYX_ERR(0, 385, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive6.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive6.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive6.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive6.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive6, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive6) < 0) __PYX_ERR(0, 385, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive6 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive6;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive7) < 0) __PYX_ERR(0, 461, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive7.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive7.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive7.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive7.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive7, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive7) < 0) __PYX_ERR(0, 461, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive7 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive7;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive8) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive8.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive8.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive8.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive8.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive8, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive8) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive8 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive8;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive9) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive9.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive9.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive9.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive9.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive9, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive9) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive9 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive9;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive10) < 0) __PYX_ERR(0, 707, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive10.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive10.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive10.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive10.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive10, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive10) < 0) __PYX_ERR(0, 707, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive10 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive10;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive11) < 0) __PYX_ERR(0, 795, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive11.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive11.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive11.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive11.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive11, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive11) < 0) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive11 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive11;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive12) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive12.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive12.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive12.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive12.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive12, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive12) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive12 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive12;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive13) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive13.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive13.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive13.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive13.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive13, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive13) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive13 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive13;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive14) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive14.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive14.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive14.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive14.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive14, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive14) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive14 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive14;
  if (PyType_Ready(&__pyx_type_13paretoarchive_4core_PyBspTreeArchive15) < 0) __PYX_ERR(0, 1177, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13paretoarchive_4core_PyBspTreeArchive15.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13paretoarchive_4core_PyBspTreeArchive15.tp_dictoffset && __pyx_type_13paretoarchive_4core_PyBspTreeArchive15.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13paretoarchive_4core_PyBspTreeArchive15.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyBspTreeArchive15, (PyObject *)&__pyx_type_13paretoarchive_4core_PyBspTreeArchive15) < 0) __PYX_ERR(0, 1177, __pyx_L1_error)
  __pyx_ptype_13paretoarchive_4core_PyBspTreeArchive15 = &__pyx_type_13paretoarchive_4core_PyBspTreeArchive15;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcore(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcore(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_core(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'core' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_paretoarchive__core) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "paretoarchive.core")) {
      if (unlikely(PyDict_SetItemString(modules, "paretoarchive.core", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "paretoarchive/core.pyx":29
 * 
 * 
 * MAXOBJ = 15             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAXOBJ, __pyx_int_15) < 0) __PYX_ERR(0, 29, __pyx_L1_error)

  /* "paretoarchive/core.pyx":1277
 *     return res
 * 
 * OBJ2CLASS = {2:PyBspTreeArchive2,3:PyBspTreeArchive3,4:PyBspTreeArchive4,5:PyBspTreeArchive5,6:PyBspTreeArchive6,7:PyBspTreeArchive7,8:PyBspTreeArchive8,9:PyBspTreeArchive9,10:PyBspTreeArchive10,11:PyBspTreeArchive11,12:PyBspTreeArchive12,13:PyBspTreeArchive13,14:PyBspTreeArchive14,15:PyBspTreeArchive15}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_2, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive2)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_3, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive3)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_4, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive4)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_5, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive5)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_6, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive6)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_7, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive7)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive8)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_9, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive9)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_10, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive10)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_11, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive11)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_12, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive12)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive13)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_14, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive14)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_15, ((PyObject *)__pyx_ptype_13paretoarchive_4core_PyBspTreeArchive15)) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OBJ2CLASS, __pyx_t_1) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":1281
 * 
 * 
 * class PyBspTreeArchive:             # <<<<<<<<<<<<<<
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):
 *       if (objectives < 2) or (objectives > MAXOBJ):
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_PyBspTreeArchive, __pyx_n_s_PyBspTreeArchive, (PyObject *) NULL, __pyx_n_s_paretoarchive_core, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "paretoarchive/core.pyx":1282
 * 
 * class PyBspTreeArchive:
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):             # <<<<<<<<<<<<<<
 *       if (objectives < 2) or (objectives > MAXOBJ):
 *          raise Exception("Invalid number of objectives. Only %s and %s is supported" % (','.join([str(a) for a in range(2, MAXOBJ)]),MAXOBJ))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_13paretoarchive_4core_16PyBspTreeArchive_1__init__, 0, __pyx_n_s_PyBspTreeArchive___init, NULL, __pyx_n_s_paretoarchive_core, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "paretoarchive/core.pyx":1293
 *       self.points = self._archive.points
 * 
 *    def filter(self, data, returnIds=False, sortKey=None):             # <<<<<<<<<<<<<<
 *      self.clear()
 *      for i, d in enumerate(data):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_13paretoarchive_4core_16PyBspTreeArchive_3filter, 0, __pyx_n_s_PyBspTreeArchive_filter, NULL, __pyx_n_s_paretoarchive_core, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__7);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_filter, __pyx_t_2) < 0) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "paretoarchive/core.pyx":1281
 * 
 * 
 * class PyBspTreeArchive:             # <<<<<<<<<<<<<<
 *    def __init__(self, objectives=3, minimizeObjective1=True, minimizeObjective2=True, minimizeObjective3=True, minimizeObjective4=True, minimizeObjective5=True, minimizeObjective6=True):
 *       if (objectives < 2) or (objectives > MAXOBJ):
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_PyBspTreeArchive, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyBspTreeArchive, __pyx_t_2) < 0) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "paretoarchive/core.pyx":2
 * 
 * # Do not edit this file manually. This file was generated automaticaly by             # <<<<<<<<<<<<<<
 * # running a script /home/vojta/git/py-paretoarchive/./gensrc.py
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_int")
 * cdef inline tuple __Pyx_carray_to_tuple_int(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init paretoarchive.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init paretoarchive.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
